{"ast":null,"code":"var _jsxFileName = \"/Users/frederickchoe/Projects/React Notes/react_wedding/src/Countdown.js\";\nimport React, { Component } from \"react\";\n\nclass Countdown extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      time: {},\n      seconds: 5\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  secondsToTime(secs) {\n    let hours = Math.floor(secs / (60 * 60));\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n    let obj = {\n      \"h\": hours,\n      \"m\": minutes,\n      \"s\": seconds\n    };\n    return obj;\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({\n      time: timeLeftVar\n    });\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds\n    }); // Check if we're at zero.\n\n    if (seconds == 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.startTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Start\"), \"m: \", this.state.time.m, \" s: \", this.state.time.s);\n  }\n\n}\n\nexport default Countdown;","map":{"version":3,"sources":["/Users/frederickchoe/Projects/React Notes/react_wedding/src/Countdown.js"],"names":["React","Component","Countdown","constructor","state","time","seconds","timer","startTimer","bind","countDown","secondsToTime","secs","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","ceil","obj","componentDidMount","timeLeftVar","setState","setInterval","clearInterval","render","m","s"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,SAAN,SAAwBF,KAAK,CAACC,SAA9B,CAAwC;AACtCE,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,OAAO,EAAE;AAArB,KAAb;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACD;;AAEDE,EAAAA,aAAa,CAACC,IAAD,EAAM;AACjB,QAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,IAAI,KAAK,EAAT,CAAf,CAAZ;AAEA,QAAII,mBAAmB,GAAGJ,IAAI,IAAI,KAAK,EAAT,CAA9B;AACA,QAAIK,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAWC,mBAAmB,GAAG,EAAjC,CAAd;AAEA,QAAIE,mBAAmB,GAAGF,mBAAmB,GAAG,EAAhD;AACA,QAAIV,OAAO,GAAGQ,IAAI,CAACK,IAAL,CAAUD,mBAAV,CAAd;AAEA,QAAIE,GAAG,GAAG;AACR,WAAKP,KADG;AAER,WAAKI,OAFG;AAGR,WAAKX;AAHG,KAAV;AAKA,WAAOc,GAAP;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,WAAW,GAAG,KAAKX,aAAL,CAAmB,KAAKP,KAAL,CAAWE,OAA9B,CAAlB;AACA,SAAKiB,QAAL,CAAc;AAAElB,MAAAA,IAAI,EAAEiB;AAAR,KAAd;AACD;;AAEDd,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKD,KAAL,IAAc,CAAd,IAAmB,KAAKH,KAAL,CAAWE,OAAX,GAAqB,CAA5C,EAA+C;AAC7C,WAAKC,KAAL,GAAaiB,WAAW,CAAC,KAAKd,SAAN,EAAiB,IAAjB,CAAxB;AACD;AACF;;AAEDA,EAAAA,SAAS,GAAG;AACV;AACA,QAAIJ,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,GAAqB,CAAnC;AACA,SAAKiB,QAAL,CAAc;AACZlB,MAAAA,IAAI,EAAE,KAAKM,aAAL,CAAmBL,OAAnB,CADM;AAEZA,MAAAA,OAAO,EAAEA;AAFG,KAAd,EAHU,CAQV;;AACA,QAAIA,OAAO,IAAI,CAAf,EAAkB;AAChBmB,MAAAA,aAAa,CAAC,KAAKlB,KAAN,CAAb;AACD;AACF;;AAEDmB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,KAAKlB,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,SAEM,KAAKJ,KAAL,CAAWC,IAAX,CAAgBsB,CAFtB,UAE6B,KAAKvB,KAAL,CAAWC,IAAX,CAAgBuB,CAF7C,CADF;AAMD;;AA1DqC;;AA6DxC,eAAe1B,SAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Countdown extends React.Component {\n  constructor() {\n    super();\n    this.state = { time: {}, seconds: 5 };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  secondsToTime(secs){\n    let hours = Math.floor(secs / (60 * 60));\n\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n    let obj = {\n      \"h\": hours,\n      \"m\": minutes,\n      \"s\": seconds\n    };\n    return obj;\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({ time: timeLeftVar });\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds,\n    });\n    \n    // Check if we're at zero.\n    if (seconds == 0) { \n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    return(\n      <div>\n        <button onClick={this.startTimer}>Start</button>\n        m: {this.state.time.m} s: {this.state.time.s}\n      </div>\n    );\n  }\n}\n \nexport default Countdown;"]},"metadata":{},"sourceType":"module"}